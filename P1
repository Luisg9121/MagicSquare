//Author: Luis Gomez
//Due Date: 2/3/2016
//Programming Assignment Number 1
// Spring 2016 - CS 3358 - 252
//
//Instructor: Husain Gholoom
//
//This program takes an int from the user and makes an int^2 matrix and then
//fills the matrix(2d array) with random, yet unique numbers. This program
//then determines whether the matrix is a magic square.
//A magic square is a matrix in which all rows and columns add to the same
//number, including the two diagonal rows. The number must be
//x = ((matrixSize * ((matrixSize * matrixSize) + 1)) / 2).

#include <iostream>
#include <ctime>
#include <cstdlib>
#include <iomanip>

using namespace std;

//The purpose of this function is to fill the array with random, but unique
//numbers. If a number already exists in the array, the function generates
//a new random number and checks the array for the new number
//input: dynamically allocated array to be filled, matrixSize(user input)
//output: none
void fillArray(int **arr, int matrixSize);

//This function sums the rows, columns, and horizontal rows in the matrix.
//This function also has a flag that remains a 0 if the matrix is a magic square
//and a 1 otherwise.
//input: dynamic array, matrixSize(user input)
//output: summations of rows, columns, diagonal rows and whether the matrix
//        is a magic square or not.
void sums(int **arr, int matrixSize);

//This function deallocates the dynamic memory at the end of main
//input: dynamically allocated array and size of array(matrixSize) to remove
void deleteMem(int **arr, int matrixSize);

int main()
{
   int matrixSize; //size of the matrix

   char choice;   //user decides whether or not to enter another matrix

   srand(time(NULL));

   cout << "Welcome to my magic sequence program . The funciton of the program "
        << "is to" << endl << endl
        << "   1. Allow the user to enter the size of the magic square such as "
        << "N . N >= 2. " << endl
        << "   2. Create an array of size N x N. " << endl
        << "   3. Populate the array with distinct random numbers." << endl
        << "   4. Display the sum for each row , column , and diagonals then "
        << "determine " << endl << "      whether  the number in N x N array "
        << "are magic square numbers. " << endl
        << endl;
   do{
     cout << endl << "Enter the size of the matrix: ";

     cin >> matrixSize;

     if(matrixSize < 2)
       {
        cout << "Error *** magic square size Must be >= 2 " << endl;
       }

      else{
   //dynamically allocated 2D array
         int **arr = new int*[matrixSize];

         for(int i = 0; i < matrixSize; i++)
            {
            arr[i] = new int[matrixSize];
            }
   //filling array
         fillArray(arr, matrixSize);

         cout << endl << "The magic sequence that is created for the size "
              << matrixSize << " :" << endl << endl << endl;

   //output of array
        for(int i = 0; i < matrixSize; i++)
           {
           for(int k = 0; k < matrixSize; k++)
              {
              cout << setw(10) << right << arr[i][k];
              }
           cout << endl << endl;
          }

        cout << endl << "The Magic number is "
             << ((matrixSize * ((matrixSize * matrixSize) + 1)) / 2) << endl
             << endl << endl;
   //printing out summations
        sums(arr, matrixSize);

        deleteMem(arr, matrixSize);
        }

    cout << endl << "Would you like to find another magic square - Enter y or Y"
        << " for yes " << endl
        << "or n | N for no  ";

    cin >> choice;

   while(choice != 'y' && choice != 'Y' && choice != 'n' && choice != 'N' )
     {
     cout << "Error *** Invalid choice - Must enter y | Y | n | N"
          << endl << endl << "Would you like to find another magic square - "
          << "Enter y or Y for yes " << endl
          << "or n | N for no  ";

     cin >> choice;
     }

   }while(choice == 'y' || choice == 'Y');

   cout << endl << "This Magic square algorithm is implemented by Luis Gomez "
        << endl;

   ("PAUSE>NULL");

   return 0;
}

void fillArray(int **arr, int matrixSize)
{
   srand( time(NULL) );
   int temp;

   for(int i = 0; i < matrixSize; i++)
      {
      for(int k = 0; k < matrixSize; k++)
         {
         temp = rand() % ((matrixSize * (( matrixSize * matrixSize ) + 1)) / 2);

          //these next two for-loops make sure that the each number is distinct
         for(int a = 0; a < matrixSize; a++)
             {
             for(int s = 0; s < matrixSize; s++)
                 {
                 if(temp == arr[a][s])
                    {//next line did not fit inside 80 so I moved it left
        temp = rand() % ((matrixSize * (( matrixSize * matrixSize ) + 1)) / 2);
                    i = 0; k = 0;
                    break;
                    }
                 }
               }
          arr[i][k] = temp;
         }
      }
}

void sums(int **arr, int matrixSize){
   int check = ((matrixSize * ((matrixSize * matrixSize) + 1)) / 2);
   int flag = 0;
   //ROWS
   for(int i = 0; i < matrixSize; i++)
      {
       int total = 0;
       for(int k = 0; k < matrixSize; k++)
          {
          total += arr[i][k];
          }
      if(total != check)
        {
        flag = 1;
        }
      cout << "Sum of numbers in Row      #   " << ( i + 1 ) << "    =   "
           << total << endl;
      }
      cout << endl;
           //columns
   for(int i = 0; i < matrixSize; i++)
       {
       int total = 0;
       for(int k = 0; k < matrixSize; k++)
           {
           total += arr[k][i];
           }
        if(total != check)
          {
          flag = 1;
          }
        cout << "Sum of numbers in Column   #   " << ( i + 1 ) << "    =   "
             << total << endl;
        }

   int firstDiag = 0,
       secDiag = 0;

   cout << endl;

   for(int i = 0; i < matrixSize; i++)
      {
      firstDiag += arr[i][i];
      secDiag += arr[i][matrixSize - 1 - i];
      }
      cout << "Sum of numbers in first diagonal    =   " << firstDiag << endl
           << "Sum of numbers in second diagonal   =   " << secDiag << endl
           << endl << endl;

   if(check != firstDiag || check != secDiag)
     {
     flag = 1;
     }

   if(flag = 0)
     cout << "The above is magic square" << endl;
   else
     cout << "The above is not a magic square" << endl;
}

void deleteMem(int **arr, int matrixSize)
{
   //de-allocating memory
   for(int i = 0; i < matrixSize; i++)
      {
      delete []arr[i];
      }

   delete [] arr;
}

